const ChildProcess = require('child_process')
const fs = require('fs')
const path = require('path')

const PBJS_BINARY_PATH = path.join(__dirname, '..', '..', '..', '..', '..', 'node_modules', 'protobufjs', 'bin', 'pbjs')
const PROTO_FILE_PATH = path.join(__dirname, '..', 'proto', '%s.proto')
const DESTINATION_PATH = path.join(__dirname, '..', 'generated', '%s.js')
const PBJS_COMMAND_LINE = `node "${PBJS_BINARY_PATH}" --target static-module --out "${DESTINATION_PATH}" --keep-case "${PROTO_FILE_PATH}"`
const GENERATED_DIR = path.join(__dirname, '../generated')

let loader = '// Auto-generated by generate-protos script on ' + (new Date()).toString() + '\n\n'
loader += 'const Schema = module.exports;\n\n'

if (!fs.existsSync(GENERATED_DIR)) {
    fs.mkdirSync(GENERATED_DIR)
}

fs.readdirSync(path.resolve(__dirname, '../proto/')).forEach((filename) => {
    if (!filename.match(/\.proto$/)) {
        return
    }

    let filenameWithoutExtension = filename.replace('.proto', '')
    let cmdLine = PBJS_COMMAND_LINE.replace(/%s/g, filenameWithoutExtension)
    console.log(cmdLine)

    ChildProcess.execSync(cmdLine)
    loader += `mergeObjects(Schema, require('./${filenameWithoutExtension}.js'))\n`
})

console.log('Generating _load.js')
loader += '\n' + mergeObjects.toString() + '\n'
fs.writeFileSync(GENERATED_DIR + '/_load.js', loader)

function mergeObjects (destinationObject, sourceObject) {
    for (let i in sourceObject) {
        if (sourceObject.hasOwnProperty(i)) {
            destinationObject[i] = sourceObject[i]
        }
    }
}
